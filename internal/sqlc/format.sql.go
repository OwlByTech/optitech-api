// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: format.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createFormat = `-- name: CreateFormat :one
INSERT INTO format(asesor_id, format_name, description, items, extension, version, create_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING format_id, updated_format_id, asesor_id, format_name, description, items, extension, version, create_at, update_at
`

type CreateFormatParams struct {
	AsesorID    int32      `json:"asesor_id"`
	FormatName  string     `json:"format_name"`
	Description string     `json:"description"`
	Items       []string   `json:"items"`
	Extension   Extensions `json:"extension"`
	Version     string     `json:"version"`
	CreateAt    time.Time  `json:"create_at"`
}

func (q *Queries) CreateFormat(ctx context.Context, arg CreateFormatParams) (Format, error) {
	row := q.db.QueryRowContext(ctx, createFormat,
		arg.AsesorID,
		arg.FormatName,
		arg.Description,
		pq.Array(arg.Items),
		arg.Extension,
		arg.Version,
		arg.CreateAt,
	)
	var i Format
	err := row.Scan(
		&i.FormatID,
		&i.UpdatedFormatID,
		&i.AsesorID,
		&i.FormatName,
		&i.Description,
		pq.Array(&i.Items),
		&i.Extension,
		&i.Version,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteAllFormats = `-- name: DeleteAllFormats :execresult
DELETE FROM format
`

func (q *Queries) DeleteAllFormats(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllFormats)
}

const deleteFormat = `-- name: DeleteFormat :exec
DELETE FROM format
WHERE format_id = $1
`

func (q *Queries) DeleteFormat(ctx context.Context, formatID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFormat, formatID)
	return err
}

const getFormat = `-- name: GetFormat :one
SELECT format_id, updated_format_id, asesor_id, format_name, description, items, extension, version, create_at, update_at FROM format
WHERE format_id = $1 LIMIT 1
`

func (q *Queries) GetFormat(ctx context.Context, formatID int64) (Format, error) {
	row := q.db.QueryRowContext(ctx, getFormat, formatID)
	var i Format
	err := row.Scan(
		&i.FormatID,
		&i.UpdatedFormatID,
		&i.AsesorID,
		&i.FormatName,
		&i.Description,
		pq.Array(&i.Items),
		&i.Extension,
		&i.Version,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getFormatByName = `-- name: GetFormatByName :one
SELECT description, items, extension, version
FROM format
WHERE format_name = $1
`

type GetFormatByNameRow struct {
	Description string     `json:"description"`
	Items       []string   `json:"items"`
	Extension   Extensions `json:"extension"`
	Version     string     `json:"version"`
}

func (q *Queries) GetFormatByName(ctx context.Context, formatName string) (GetFormatByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getFormatByName, formatName)
	var i GetFormatByNameRow
	err := row.Scan(
		&i.Description,
		pq.Array(&i.Items),
		&i.Extension,
		&i.Version,
	)
	return i, err
}

const listFormats = `-- name: ListFormats :many
SELECT format_id, updated_format_id, asesor_id, format_name, description, items, extension, version, create_at, update_at FROM format
ORDER BY format_name
`

func (q *Queries) ListFormats(ctx context.Context) ([]Format, error) {
	rows, err := q.db.QueryContext(ctx, listFormats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Format
	for rows.Next() {
		var i Format
		if err := rows.Scan(
			&i.FormatID,
			&i.UpdatedFormatID,
			&i.AsesorID,
			&i.FormatName,
			&i.Description,
			pq.Array(&i.Items),
			&i.Extension,
			&i.Version,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFormatById = `-- name: UpdateFormatById :exec
UPDATE format
SET format_name = $2, description = $3, items = $4, extension=$5, version=$6, update_at=$7
WHERE format_id = $1
`

type UpdateFormatByIdParams struct {
	FormatID    int64        `json:"format_id"`
	FormatName  string       `json:"format_name"`
	Description string       `json:"description"`
	Items       []string     `json:"items"`
	Extension   Extensions   `json:"extension"`
	Version     string       `json:"version"`
	UpdateAt    sql.NullTime `json:"update_at"`
}

func (q *Queries) UpdateFormatById(ctx context.Context, arg UpdateFormatByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateFormatById,
		arg.FormatID,
		arg.FormatName,
		arg.Description,
		pq.Array(arg.Items),
		arg.Extension,
		arg.Version,
		arg.UpdateAt,
	)
	return err
}
