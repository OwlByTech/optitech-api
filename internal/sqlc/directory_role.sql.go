// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: directory_role.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDirectoryRole = `-- name: CreateDirectoryRole :one
INSERT INTO directory_role(directory_id, user_id, status, created_at)
VALUES ($1, $2, $3, $4)
RETURNING directory_id, user_id, status, created_at, updated_at, deleted_at
`

type CreateDirectoryRoleParams struct {
	DirectoryID pgtype.Int4      `json:"directory_id"`
	UserID      pgtype.Int4      `json:"user_id"`
	Status      Permissions      `json:"status"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateDirectoryRole(ctx context.Context, arg CreateDirectoryRoleParams) (DirectoryRole, error) {
	row := q.db.QueryRow(ctx, createDirectoryRole,
		arg.DirectoryID,
		arg.UserID,
		arg.Status,
		arg.CreatedAt,
	)
	var i DirectoryRole
	err := row.Scan(
		&i.DirectoryID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllDirectoryRoles = `-- name: DeleteAllDirectoryRoles :execresult
UPDATE directory_role
SET deleted_at = $1
WHERE deleted_at IS NULL
`

func (q *Queries) DeleteAllDirectoryRoles(ctx context.Context, deletedAt pgtype.Timestamp) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteAllDirectoryRoles, deletedAt)
}

const deleteDirectoryRoleById = `-- name: DeleteDirectoryRoleById :exec
UPDATE directory_role
SET deleted_at = $3
WHERE directory_id = $1 AND user_id = $2
`

type DeleteDirectoryRoleByIdParams struct {
	DirectoryID pgtype.Int4      `json:"directory_id"`
	UserID      pgtype.Int4      `json:"user_id"`
	DeletedAt   pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) DeleteDirectoryRoleById(ctx context.Context, arg DeleteDirectoryRoleByIdParams) error {
	_, err := q.db.Exec(ctx, deleteDirectoryRoleById, arg.DirectoryID, arg.UserID, arg.DeletedAt)
	return err
}

const getDirectoryRole = `-- name: GetDirectoryRole :one
SELECT directory_id, user_id, status, created_at, updated_at, deleted_at FROM directory_role
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetDirectoryRole(ctx context.Context, userID pgtype.Int4) (DirectoryRole, error) {
	row := q.db.QueryRow(ctx, getDirectoryRole, userID)
	var i DirectoryRole
	err := row.Scan(
		&i.DirectoryID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listDirectoryRoles = `-- name: ListDirectoryRoles :many
SELECT directory_id, user_id, status, created_at, updated_at, deleted_at FROM directory_role
ORDER BY user_id
`

func (q *Queries) ListDirectoryRoles(ctx context.Context) ([]DirectoryRole, error) {
	rows, err := q.db.Query(ctx, listDirectoryRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DirectoryRole
	for rows.Next() {
		var i DirectoryRole
		if err := rows.Scan(
			&i.DirectoryID,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDirectoryRole = `-- name: UpdateDirectoryRole :exec
UPDATE directory_role
SET user_id = $2, updated_at = $3, status = $4
WHERE directory_id = $1
`

type UpdateDirectoryRoleParams struct {
	DirectoryID pgtype.Int4      `json:"directory_id"`
	UserID      pgtype.Int4      `json:"user_id"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Status      Permissions      `json:"status"`
}

func (q *Queries) UpdateDirectoryRole(ctx context.Context, arg UpdateDirectoryRoleParams) error {
	_, err := q.db.Exec(ctx, updateDirectoryRole,
		arg.DirectoryID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Status,
	)
	return err
}
