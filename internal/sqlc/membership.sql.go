// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: membership.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO membership(membership_type_id, created_at, finish_at)
VALUES ($1, $2, $3)
RETURNING membership_id, membership_type_id, created_at, finish_at, updated_at, deleted_at
`

type CreateMembershipParams struct {
	MembershipTypeID sql.NullInt32 `json:"membership_type_id"`
	CreatedAt        time.Time     `json:"created_at"`
	FinishAt         time.Time     `json:"finish_at"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership, arg.MembershipTypeID, arg.CreatedAt, arg.FinishAt)
	var i Membership
	err := row.Scan(
		&i.MembershipID,
		&i.MembershipTypeID,
		&i.CreatedAt,
		&i.FinishAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMembershipById = `-- name: DeleteMembershipById :exec
UPDATE membership
SET deleted_at = $2
WHERE membership_id = $1
`

type DeleteMembershipByIdParams struct {
	MembershipID int64        `json:"membership_id"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
}

func (q *Queries) DeleteMembershipById(ctx context.Context, arg DeleteMembershipByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteMembershipById, arg.MembershipID, arg.DeletedAt)
	return err
}

const deleteRoleAllPermissions = `-- name: DeleteRoleAllPermissions :execresult
UPDATE membership
SET deleted_at = $1
WHERE deleted_at IS NULL
`

func (q *Queries) DeleteRoleAllPermissions(ctx context.Context, deletedAt sql.NullTime) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRoleAllPermissions, deletedAt)
}

const getMembershipByName = `-- name: GetMembershipByName :one
SELECT membership_type_id, finish_at
FROM membership
WHERE membership_id = $1
`

type GetMembershipByNameRow struct {
	MembershipTypeID sql.NullInt32 `json:"membership_type_id"`
	FinishAt         time.Time     `json:"finish_at"`
}

func (q *Queries) GetMembershipByName(ctx context.Context, membershipID int64) (GetMembershipByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getMembershipByName, membershipID)
	var i GetMembershipByNameRow
	err := row.Scan(&i.MembershipTypeID, &i.FinishAt)
	return i, err
}

const listMemberships = `-- name: ListMemberships :many
SELECT membership_id, membership_type_id, created_at, finish_at, updated_at, deleted_at FROM membership
ORDER BY membership_id
`

func (q *Queries) ListMemberships(ctx context.Context) ([]Membership, error) {
	rows, err := q.db.QueryContext(ctx, listMemberships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.MembershipID,
			&i.MembershipTypeID,
			&i.CreatedAt,
			&i.FinishAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipById = `-- name: UpdateMembershipById :exec
UPDATE membership
SET membership_type_id = $2, finish_at = $3, updated_at = $4
WHERE membership_id = $1
`

type UpdateMembershipByIdParams struct {
	MembershipID     int64         `json:"membership_id"`
	MembershipTypeID sql.NullInt32 `json:"membership_type_id"`
	FinishAt         time.Time     `json:"finish_at"`
	UpdatedAt        sql.NullTime  `json:"updated_at"`
}

func (q *Queries) UpdateMembershipById(ctx context.Context, arg UpdateMembershipByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateMembershipById,
		arg.MembershipID,
		arg.MembershipTypeID,
		arg.FinishAt,
		arg.UpdatedAt,
	)
	return err
}
