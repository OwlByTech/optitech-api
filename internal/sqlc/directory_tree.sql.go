// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: directory_tree.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDirectoryTree = `-- name: CreateDirectoryTree :one
INSERT INTO directory_tree(parent_id, name, created_at)
VALUES ($1, $2, $3)
RETURNING directory_id, parent_id, name, created_at, updated_at, deleted_at
`

type CreateDirectoryTreeParams struct {
	ParentID  pgtype.Int4      `json:"parent_id"`
	Name      pgtype.Text      `json:"name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateDirectoryTree(ctx context.Context, arg CreateDirectoryTreeParams) (DirectoryTree, error) {
	row := q.db.QueryRow(ctx, createDirectoryTree, arg.ParentID, arg.Name, arg.CreatedAt)
	var i DirectoryTree
	err := row.Scan(
		&i.DirectoryID,
		&i.ParentID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllDirectoryTrees = `-- name: DeleteAllDirectoryTrees :execresult
UPDATE directory_tree
SET deleted_at = $1
WHERE deleted_at IS NULL
`

func (q *Queries) DeleteAllDirectoryTrees(ctx context.Context, deletedAt pgtype.Timestamp) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteAllDirectoryTrees, deletedAt)
}

const deleteDirectoryTreeById = `-- name: DeleteDirectoryTreeById :exec
UPDATE directory_tree
SET deleted_at = $2
WHERE directory_id = $1
`

type DeleteDirectoryTreeByIdParams struct {
	DirectoryID int64            `json:"directory_id"`
	DeletedAt   pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) DeleteDirectoryTreeById(ctx context.Context, arg DeleteDirectoryTreeByIdParams) error {
	_, err := q.db.Exec(ctx, deleteDirectoryTreeById, arg.DirectoryID, arg.DeletedAt)
	return err
}

const getDirectoryChildByParent = `-- name: GetDirectoryChildByParent :many
SELECT dr.directory_id, dr.parent_id, dr.name, dr.created_at, dr.updated_at, dr.deleted_at, d.document_id, d.directory_id, d.format_id, d.name, d.file_rute, d.status, d.created_at, d.updated_at, d.deleted_at
FROM directory_tree dr
JOIN document d ON dr.directory_id= d.directory_id
WHERE dr.parent_id= $1
`

type GetDirectoryChildByParentRow struct {
	DirectoryTree DirectoryTree `json:"directory_tree"`
	Document      Document      `json:"document"`
}

func (q *Queries) GetDirectoryChildByParent(ctx context.Context, parentID pgtype.Int4) ([]GetDirectoryChildByParentRow, error) {
	rows, err := q.db.Query(ctx, getDirectoryChildByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDirectoryChildByParentRow
	for rows.Next() {
		var i GetDirectoryChildByParentRow
		if err := rows.Scan(
			&i.DirectoryTree.DirectoryID,
			&i.DirectoryTree.ParentID,
			&i.DirectoryTree.Name,
			&i.DirectoryTree.CreatedAt,
			&i.DirectoryTree.UpdatedAt,
			&i.DirectoryTree.DeletedAt,
			&i.Document.DocumentID,
			&i.Document.DirectoryID,
			&i.Document.FormatID,
			&i.Document.Name,
			&i.Document.FileRute,
			&i.Document.Status,
			&i.Document.CreatedAt,
			&i.Document.UpdatedAt,
			&i.Document.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDirectoryTree = `-- name: GetDirectoryTree :one
SELECT directory_id, parent_id, name, created_at, updated_at, deleted_at FROM directory_tree
WHERE directory_id = $1 LIMIT 1
`

func (q *Queries) GetDirectoryTree(ctx context.Context, directoryID int64) (DirectoryTree, error) {
	row := q.db.QueryRow(ctx, getDirectoryTree, directoryID)
	var i DirectoryTree
	err := row.Scan(
		&i.DirectoryID,
		&i.ParentID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDirectoryTreeByName = `-- name: GetDirectoryTreeByName :one
SELECT name
FROM directory_tree
WHERE directory_id = $1
`

func (q *Queries) GetDirectoryTreeByName(ctx context.Context, directoryID int64) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getDirectoryTreeByName, directoryID)
	var name pgtype.Text
	err := row.Scan(&name)
	return name, err
}

const listDirectoryTrees = `-- name: ListDirectoryTrees :many
SELECT directory_id, parent_id, name, created_at, updated_at, deleted_at FROM directory_tree
ORDER BY directory_id
`

func (q *Queries) ListDirectoryTrees(ctx context.Context) ([]DirectoryTree, error) {
	rows, err := q.db.Query(ctx, listDirectoryTrees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DirectoryTree
	for rows.Next() {
		var i DirectoryTree
		if err := rows.Scan(
			&i.DirectoryID,
			&i.ParentID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
