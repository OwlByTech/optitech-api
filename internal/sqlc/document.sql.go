// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: document.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO document(format_id, institution_id, client_id, file_rute, status, create_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING document_id, format_id, institution_id, client_id, file_rute, status, create_at, update_at
`

type CreateDocumentParams struct {
	FormatID      int32      `json:"format_id"`
	InstitutionID int32      `json:"institution_id"`
	ClientID      int32      `json:"client_id"`
	FileRute      string     `json:"file_rute"`
	Status        NullStatus `json:"status"`
	CreateAt      time.Time  `json:"create_at"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.FormatID,
		arg.InstitutionID,
		arg.ClientID,
		arg.FileRute,
		arg.Status,
		arg.CreateAt,
	)
	var i Document
	err := row.Scan(
		&i.DocumentID,
		&i.FormatID,
		&i.InstitutionID,
		&i.ClientID,
		&i.FileRute,
		&i.Status,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteAllDocuments = `-- name: DeleteAllDocuments :execresult
DELETE FROM document
`

func (q *Queries) DeleteAllDocuments(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllDocuments)
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM document
WHERE document_id = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, documentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteDocument, documentID)
	return err
}

const getDocument = `-- name: GetDocument :one
SELECT document_id, format_id, institution_id, client_id, file_rute, status, create_at, update_at FROM document
WHERE document_id = $1 LIMIT 1
`

func (q *Queries) GetDocument(ctx context.Context, documentID int64) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocument, documentID)
	var i Document
	err := row.Scan(
		&i.DocumentID,
		&i.FormatID,
		&i.InstitutionID,
		&i.ClientID,
		&i.FileRute,
		&i.Status,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getDocumentByName = `-- name: GetDocumentByName :one
SELECT format_id, institution_id, client_id, file_rute, status
FROM document
WHERE document_id = $1
`

type GetDocumentByNameRow struct {
	FormatID      int32      `json:"format_id"`
	InstitutionID int32      `json:"institution_id"`
	ClientID      int32      `json:"client_id"`
	FileRute      string     `json:"file_rute"`
	Status        NullStatus `json:"status"`
}

func (q *Queries) GetDocumentByName(ctx context.Context, documentID int64) (GetDocumentByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByName, documentID)
	var i GetDocumentByNameRow
	err := row.Scan(
		&i.FormatID,
		&i.InstitutionID,
		&i.ClientID,
		&i.FileRute,
		&i.Status,
	)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT document_id, format_id, institution_id, client_id, file_rute, status, create_at, update_at FROM document
ORDER BY document_id
`

func (q *Queries) ListDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, listDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.DocumentID,
			&i.FormatID,
			&i.InstitutionID,
			&i.ClientID,
			&i.FileRute,
			&i.Status,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocumentById = `-- name: UpdateDocumentById :exec
UPDATE document
SET file_rute = $2, status = $3, update_at = $4
WHERE document_id = $1
`

type UpdateDocumentByIdParams struct {
	DocumentID int64        `json:"document_id"`
	FileRute   string       `json:"file_rute"`
	Status     NullStatus   `json:"status"`
	UpdateAt   sql.NullTime `json:"update_at"`
}

func (q *Queries) UpdateDocumentById(ctx context.Context, arg UpdateDocumentByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateDocumentById,
		arg.DocumentID,
		arg.FileRute,
		arg.Status,
		arg.UpdateAt,
	)
	return err
}
