// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: institution_client.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createInstitutionClient = `-- name: CreateInstitutionClient :one
INSERT INTO institution_client(client_id, institution_id, vinculated_at)
VALUES ($1, $2, $3)
RETURNING institution_client_id, client_id, institution_id, vinculated_at, update_at
`

type CreateInstitutionClientParams struct {
	ClientID      int32     `json:"client_id"`
	InstitutionID int32     `json:"institution_id"`
	VinculatedAt  time.Time `json:"vinculated_at"`
}

func (q *Queries) CreateInstitutionClient(ctx context.Context, arg CreateInstitutionClientParams) (InstitutionClient, error) {
	row := q.db.QueryRowContext(ctx, createInstitutionClient, arg.ClientID, arg.InstitutionID, arg.VinculatedAt)
	var i InstitutionClient
	err := row.Scan(
		&i.InstitutionClientID,
		&i.ClientID,
		&i.InstitutionID,
		&i.VinculatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteAllInstitutionClients = `-- name: DeleteAllInstitutionClients :execresult
DELETE FROM institution_client
`

func (q *Queries) DeleteAllInstitutionClients(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllInstitutionClients)
}

const deleteInstitutionClient = `-- name: DeleteInstitutionClient :exec
DELETE FROM institution_client
WHERE institution_client_id = $1
`

func (q *Queries) DeleteInstitutionClient(ctx context.Context, institutionClientID int64) error {
	_, err := q.db.ExecContext(ctx, deleteInstitutionClient, institutionClientID)
	return err
}

const getInstitutionClient = `-- name: GetInstitutionClient :one
SELECT institution_client_id, client_id, institution_id, vinculated_at, update_at FROM institution_client
WHERE institution_client_id = $1 LIMIT 1
`

func (q *Queries) GetInstitutionClient(ctx context.Context, institutionClientID int64) (InstitutionClient, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionClient, institutionClientID)
	var i InstitutionClient
	err := row.Scan(
		&i.InstitutionClientID,
		&i.ClientID,
		&i.InstitutionID,
		&i.VinculatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getInstitutionClientByName = `-- name: GetInstitutionClientByName :one
SELECT client_id, institution_id
FROM institution_client
WHERE institution_client_id = $1
`

type GetInstitutionClientByNameRow struct {
	ClientID      int32 `json:"client_id"`
	InstitutionID int32 `json:"institution_id"`
}

func (q *Queries) GetInstitutionClientByName(ctx context.Context, institutionClientID int64) (GetInstitutionClientByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionClientByName, institutionClientID)
	var i GetInstitutionClientByNameRow
	err := row.Scan(&i.ClientID, &i.InstitutionID)
	return i, err
}

const listInstitutionClients = `-- name: ListInstitutionClients :many
SELECT institution_client_id, client_id, institution_id, vinculated_at, update_at FROM institution_client
ORDER BY institution_client_id
`

func (q *Queries) ListInstitutionClients(ctx context.Context) ([]InstitutionClient, error) {
	rows, err := q.db.QueryContext(ctx, listInstitutionClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionClient
	for rows.Next() {
		var i InstitutionClient
		if err := rows.Scan(
			&i.InstitutionClientID,
			&i.ClientID,
			&i.InstitutionID,
			&i.VinculatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionClientById = `-- name: UpdateInstitutionClientById :exec
UPDATE institution_client
SET client_id = $2, institution_id = $3, update_at = $4
WHERE institution_client_id = $1
`

type UpdateInstitutionClientByIdParams struct {
	InstitutionClientID int64        `json:"institution_client_id"`
	ClientID            int32        `json:"client_id"`
	InstitutionID       int32        `json:"institution_id"`
	UpdateAt            sql.NullTime `json:"update_at"`
}

func (q *Queries) UpdateInstitutionClientById(ctx context.Context, arg UpdateInstitutionClientByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateInstitutionClientById,
		arg.InstitutionClientID,
		arg.ClientID,
		arg.InstitutionID,
		arg.UpdateAt,
	)
	return err
}
