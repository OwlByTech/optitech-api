// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: institution_client.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateInstitutionClientParams struct {
	ClientID      int32            `json:"client_id"`
	InstitutionID int32            `json:"institution_id"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

const deleteInstitutionByClient = `-- name: DeleteInstitutionByClient :exec
UPDATE institution_client
SET deleted_at = $2
WHERE institution_id= $1 AND client_id= $3
`

type DeleteInstitutionByClientParams struct {
	InstitutionID int32            `json:"institution_id"`
	DeletedAt     pgtype.Timestamp `json:"deleted_at"`
	ClientID      int32            `json:"client_id"`
}

func (q *Queries) DeleteInstitutionByClient(ctx context.Context, arg DeleteInstitutionByClientParams) error {
	_, err := q.db.Exec(ctx, deleteInstitutionByClient, arg.InstitutionID, arg.DeletedAt, arg.ClientID)
	return err
}

const deleteInstitutionClient = `-- name: DeleteInstitutionClient :exec
UPDATE institution_client
SET deleted_at = $2
WHERE institution_id = $1
`

type DeleteInstitutionClientParams struct {
	InstitutionID int32            `json:"institution_id"`
	DeletedAt     pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) DeleteInstitutionClient(ctx context.Context, arg DeleteInstitutionClientParams) error {
	_, err := q.db.Exec(ctx, deleteInstitutionClient, arg.InstitutionID, arg.DeletedAt)
	return err
}

const existsInstitutionClient = `-- name: ExistsInstitutionClient :one
SELECT client_id, institution_id, created_at, updated_at, deleted_at FROM institution_client
WHERE client_id = $1 AND institution_id=$2 and deleted_at IS NOT NULL
`

type ExistsInstitutionClientParams struct {
	ClientID      int32 `json:"client_id"`
	InstitutionID int32 `json:"institution_id"`
}

func (q *Queries) ExistsInstitutionClient(ctx context.Context, arg ExistsInstitutionClientParams) (InstitutionClient, error) {
	row := q.db.QueryRow(ctx, existsInstitutionClient, arg.ClientID, arg.InstitutionID)
	var i InstitutionClient
	err := row.Scan(
		&i.ClientID,
		&i.InstitutionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getClientByInstitutionId = `-- name: GetClientByInstitutionId :one
SELECT client_id, institution_id, created_at, updated_at, deleted_at FROM institution_client
WHERE institution_id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetClientByInstitutionId(ctx context.Context, institutionID int32) (InstitutionClient, error) {
	row := q.db.QueryRow(ctx, getClientByInstitutionId, institutionID)
	var i InstitutionClient
	err := row.Scan(
		&i.ClientID,
		&i.InstitutionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getInstitutionClient = `-- name: GetInstitutionClient :one
SELECT client_id, institution_id, created_at, updated_at, deleted_at FROM institution_client
WHERE client_id = $1 AND institution_id=$2 AND deleted_at IS NULL
`

type GetInstitutionClientParams struct {
	ClientID      int32 `json:"client_id"`
	InstitutionID int32 `json:"institution_id"`
}

func (q *Queries) GetInstitutionClient(ctx context.Context, arg GetInstitutionClientParams) (InstitutionClient, error) {
	row := q.db.QueryRow(ctx, getInstitutionClient, arg.ClientID, arg.InstitutionID)
	var i InstitutionClient
	err := row.Scan(
		&i.ClientID,
		&i.InstitutionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listInstitutionClients = `-- name: ListInstitutionClients :many
SELECT client.given_name,client.surname,client.email ,institution_client.client_id FROM institution_client
INNER JOIN client ON institution_client.client_id=client.client_id
WHERE  institution_client.institution_id=$1
`

type ListInstitutionClientsRow struct {
	GivenName string `json:"given_name"`
	Surname   string `json:"surname"`
	Email     string `json:"email"`
	ClientID  int32  `json:"client_id"`
}

func (q *Queries) ListInstitutionClients(ctx context.Context, institutionID int32) ([]ListInstitutionClientsRow, error) {
	rows, err := q.db.Query(ctx, listInstitutionClients, institutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListInstitutionClientsRow
	for rows.Next() {
		var i ListInstitutionClientsRow
		if err := rows.Scan(
			&i.GivenName,
			&i.Surname,
			&i.Email,
			&i.ClientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recoverInstitutionClient = `-- name: RecoverInstitutionClient :exec
UPDATE institution_client
SET deleted_at = NULL,updated_at= $2
WHERE institution_id= $1 AND client_id= $3
`

type RecoverInstitutionClientParams struct {
	InstitutionID int32            `json:"institution_id"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	ClientID      int32            `json:"client_id"`
}

func (q *Queries) RecoverInstitutionClient(ctx context.Context, arg RecoverInstitutionClientParams) error {
	_, err := q.db.Exec(ctx, recoverInstitutionClient, arg.InstitutionID, arg.UpdatedAt, arg.ClientID)
	return err
}
