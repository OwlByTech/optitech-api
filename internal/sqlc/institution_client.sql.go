// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: institution_client.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createInstitutionClient = `-- name: CreateInstitutionClient :one
INSERT INTO institution_client(client_id, institution_id, created_at)
VALUES ($1, $2, $3)
RETURNING institution_client_id, client_id, institution_id, created_at, updated_at, deleted_at
`

type CreateInstitutionClientParams struct {
	ClientID      int32     `json:"client_id"`
	InstitutionID int32     `json:"institution_id"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateInstitutionClient(ctx context.Context, arg CreateInstitutionClientParams) (InstitutionClient, error) {
	row := q.db.QueryRowContext(ctx, createInstitutionClient, arg.ClientID, arg.InstitutionID, arg.CreatedAt)
	var i InstitutionClient
	err := row.Scan(
		&i.InstitutionClientID,
		&i.ClientID,
		&i.InstitutionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllInstitutionClient = `-- name: DeleteAllInstitutionClient :execresult
UPDATE institution_client
SET deleted_at = $1
WHERE institution_client_id IS NULL
`

func (q *Queries) DeleteAllInstitutionClient(ctx context.Context, deletedAt sql.NullTime) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllInstitutionClient, deletedAt)
}

const deleteinstInstitutionClientById = `-- name: DeleteinstInstitutionClientById :exec
UPDATE institution_client
SET deleted_at = $2
WHERE institution_client_id = $1
`

type DeleteinstInstitutionClientByIdParams struct {
	InstitutionClientID int64        `json:"institution_client_id"`
	DeletedAt           sql.NullTime `json:"deleted_at"`
}

func (q *Queries) DeleteinstInstitutionClientById(ctx context.Context, arg DeleteinstInstitutionClientByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteinstInstitutionClientById, arg.InstitutionClientID, arg.DeletedAt)
	return err
}

const getInstitutionClient = `-- name: GetInstitutionClient :one
SELECT institution_client_id, client_id, institution_id, created_at, updated_at, deleted_at FROM institution_client
WHERE institution_client_id = $1 LIMIT 1
`

func (q *Queries) GetInstitutionClient(ctx context.Context, institutionClientID int64) (InstitutionClient, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionClient, institutionClientID)
	var i InstitutionClient
	err := row.Scan(
		&i.InstitutionClientID,
		&i.ClientID,
		&i.InstitutionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getInstitutionClientByName = `-- name: GetInstitutionClientByName :one
SELECT client_id, institution_id
FROM institution_client
WHERE institution_client_id = $1
`

type GetInstitutionClientByNameRow struct {
	ClientID      int32 `json:"client_id"`
	InstitutionID int32 `json:"institution_id"`
}

func (q *Queries) GetInstitutionClientByName(ctx context.Context, institutionClientID int64) (GetInstitutionClientByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionClientByName, institutionClientID)
	var i GetInstitutionClientByNameRow
	err := row.Scan(&i.ClientID, &i.InstitutionID)
	return i, err
}

const listInstitutionClients = `-- name: ListInstitutionClients :many
SELECT institution_client_id, client_id, institution_id, created_at, updated_at, deleted_at FROM institution_client
ORDER BY institution_client_id
`

func (q *Queries) ListInstitutionClients(ctx context.Context) ([]InstitutionClient, error) {
	rows, err := q.db.QueryContext(ctx, listInstitutionClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionClient
	for rows.Next() {
		var i InstitutionClient
		if err := rows.Scan(
			&i.InstitutionClientID,
			&i.ClientID,
			&i.InstitutionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitutionClientById = `-- name: UpdateInstitutionClientById :exec
UPDATE institution_client
SET client_id = $2, institution_id = $3, updated_at = $4
WHERE institution_client_id = $1
`

type UpdateInstitutionClientByIdParams struct {
	InstitutionClientID int64        `json:"institution_client_id"`
	ClientID            int32        `json:"client_id"`
	InstitutionID       int32        `json:"institution_id"`
	UpdatedAt           sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdateInstitutionClientById(ctx context.Context, arg UpdateInstitutionClientByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateInstitutionClientById,
		arg.InstitutionClientID,
		arg.ClientID,
		arg.InstitutionID,
		arg.UpdatedAt,
	)
	return err
}
