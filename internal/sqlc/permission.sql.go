// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permission(permission_type, created_at)
VALUES ($1, $2)
RETURNING permission_id, permission_type, created_at, updated_at, deleted_at
`

type CreatePermissionParams struct {
	PermissionType string    `json:"permission_type"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, arg.PermissionType, arg.CreatedAt)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.PermissionType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllPermissions = `-- name: DeleteAllPermissions :execresult
UPDATE permission
SET deleted_at = $1
WHERE deleted_at IS NULL
`

func (q *Queries) DeleteAllPermissions(ctx context.Context, deletedAt sql.NullTime) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllPermissions, deletedAt)
}

const deletePermissionById = `-- name: DeletePermissionById :exec
UPDATE permission
SET deleted_at = $2
WHERE permission_id = $1
`

type DeletePermissionByIdParams struct {
	PermissionID int64        `json:"permission_id"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
}

func (q *Queries) DeletePermissionById(ctx context.Context, arg DeletePermissionByIdParams) error {
	_, err := q.db.ExecContext(ctx, deletePermissionById, arg.PermissionID, arg.DeletedAt)
	return err
}

const getPermission = `-- name: GetPermission :one
SELECT permission_id, permission_type, created_at, updated_at, deleted_at FROM permission
WHERE permission_id = $1 LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, permissionID int64) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermission, permissionID)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.PermissionType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPermissionByName = `-- name: GetPermissionByName :one
SELECT permission_type
FROM permission
WHERE permission_id = $1
`

func (q *Queries) GetPermissionByName(ctx context.Context, permissionID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByName, permissionID)
	var permission_type string
	err := row.Scan(&permission_type)
	return permission_type, err
}

const listPermissions = `-- name: ListPermissions :many
SELECT permission_id, permission_type, created_at, updated_at, deleted_at FROM permission
ORDER BY permission_id
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.PermissionID,
			&i.PermissionType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermissionById = `-- name: UpdatePermissionById :exec
UPDATE permission
SET permission_type = $2, updated_at = $3
WHERE permission_id = $1
`

type UpdatePermissionByIdParams struct {
	PermissionID   int64        `json:"permission_id"`
	PermissionType string       `json:"permission_type"`
	UpdatedAt      sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdatePermissionById(ctx context.Context, arg UpdatePermissionByIdParams) error {
	_, err := q.db.ExecContext(ctx, updatePermissionById, arg.PermissionID, arg.PermissionType, arg.UpdatedAt)
	return err
}
