// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permission(name, code, description, created_at)
VALUES ($1, $2, $3, $4)
RETURNING permission_id, name, code, description, created_at, updated_at, deleted_at
`

type CreatePermissionParams struct {
	Name        string           `json:"name"`
	Code        string           `json:"code"`
	Description string           `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.CreatedAt,
	)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.Name,
		&i.Code,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllPermissions = `-- name: DeleteAllPermissions :execresult
UPDATE permission
SET deleted_at = $1
WHERE deleted_at IS NULL
`

func (q *Queries) DeleteAllPermissions(ctx context.Context, deletedAt pgtype.Timestamp) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteAllPermissions, deletedAt)
}

const deletePermissionById = `-- name: DeletePermissionById :exec
UPDATE permission
SET deleted_at = $2
WHERE permission_id = $1
`

type DeletePermissionByIdParams struct {
	PermissionID int64            `json:"permission_id"`
	DeletedAt    pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) DeletePermissionById(ctx context.Context, arg DeletePermissionByIdParams) error {
	_, err := q.db.Exec(ctx, deletePermissionById, arg.PermissionID, arg.DeletedAt)
	return err
}

const getPermission = `-- name: GetPermission :one
SELECT permission_id, name, code, description, created_at, updated_at, deleted_at FROM permission
WHERE permission_id = $1 LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, permissionID int64) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermission, permissionID)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.Name,
		&i.Code,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPermissionByName = `-- name: GetPermissionByName :one
SELECT name, code, description
FROM permission
WHERE permission_id = $1
`

type GetPermissionByNameRow struct {
	Name        string `json:"name"`
	Code        string `json:"code"`
	Description string `json:"description"`
}

func (q *Queries) GetPermissionByName(ctx context.Context, permissionID int64) (GetPermissionByNameRow, error) {
	row := q.db.QueryRow(ctx, getPermissionByName, permissionID)
	var i GetPermissionByNameRow
	err := row.Scan(&i.Name, &i.Code, &i.Description)
	return i, err
}

const listPermissions = `-- name: ListPermissions :many
SELECT permission_id, name, code, description, created_at, updated_at, deleted_at FROM permission
ORDER BY permission_id
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.PermissionID,
			&i.Name,
			&i.Code,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermissionById = `-- name: UpdatePermissionById :exec
UPDATE permission
SET name = $2, code = $3, description = $4, updated_at = $5
WHERE permission_id = $1
`

type UpdatePermissionByIdParams struct {
	PermissionID int64            `json:"permission_id"`
	Name         string           `json:"name"`
	Code         string           `json:"code"`
	Description  string           `json:"description"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdatePermissionById(ctx context.Context, arg UpdatePermissionByIdParams) error {
	_, err := q.db.Exec(ctx, updatePermissionById,
		arg.PermissionID,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
