// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: directory_institution.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createDirectoryInstitution = `-- name: CreateDirectoryInstitution :one
INSERT INTO directory_institution(institution_id, directory_id, created_at)
VALUES ($1, $2, $3)
RETURNING directory_institution_id, institution_id, directory_id, created_at, updated_at, deleted_at
`

type CreateDirectoryInstitutionParams struct {
	InstitutionID sql.NullInt32 `json:"institution_id"`
	DirectoryID   sql.NullInt32 `json:"directory_id"`
	CreatedAt     time.Time     `json:"created_at"`
}

func (q *Queries) CreateDirectoryInstitution(ctx context.Context, arg CreateDirectoryInstitutionParams) (DirectoryInstitution, error) {
	row := q.db.QueryRowContext(ctx, createDirectoryInstitution, arg.InstitutionID, arg.DirectoryID, arg.CreatedAt)
	var i DirectoryInstitution
	err := row.Scan(
		&i.DirectoryInstitutionID,
		&i.InstitutionID,
		&i.DirectoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllDirectoryInstitutions = `-- name: DeleteAllDirectoryInstitutions :execresult
UPDATE directory_institution
SET deleted_at = $1
WHERE directory_institution_id IS NULL
`

func (q *Queries) DeleteAllDirectoryInstitutions(ctx context.Context, deletedAt sql.NullTime) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllDirectoryInstitutions, deletedAt)
}

const deleteDirectoryInstitutionById = `-- name: DeleteDirectoryInstitutionById :exec
UPDATE directory_institution
SET deleted_at = $2
WHERE directory_institution_id = $1
`

type DeleteDirectoryInstitutionByIdParams struct {
	DirectoryInstitutionID int64        `json:"directory_institution_id"`
	DeletedAt              sql.NullTime `json:"deleted_at"`
}

func (q *Queries) DeleteDirectoryInstitutionById(ctx context.Context, arg DeleteDirectoryInstitutionByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteDirectoryInstitutionById, arg.DirectoryInstitutionID, arg.DeletedAt)
	return err
}

const getDirectoryInstitution = `-- name: GetDirectoryInstitution :one
SELECT directory_institution_id, institution_id, directory_id, created_at, updated_at, deleted_at FROM directory_institution
WHERE directory_institution_id = $1 LIMIT 1
`

func (q *Queries) GetDirectoryInstitution(ctx context.Context, directoryInstitutionID int64) (DirectoryInstitution, error) {
	row := q.db.QueryRowContext(ctx, getDirectoryInstitution, directoryInstitutionID)
	var i DirectoryInstitution
	err := row.Scan(
		&i.DirectoryInstitutionID,
		&i.InstitutionID,
		&i.DirectoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDirectoryInstitutionByName = `-- name: GetDirectoryInstitutionByName :one
SELECT institution_id, directory_id
FROM directory_institution
WHERE directory_institution_id = $1
`

type GetDirectoryInstitutionByNameRow struct {
	InstitutionID sql.NullInt32 `json:"institution_id"`
	DirectoryID   sql.NullInt32 `json:"directory_id"`
}

func (q *Queries) GetDirectoryInstitutionByName(ctx context.Context, directoryInstitutionID int64) (GetDirectoryInstitutionByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getDirectoryInstitutionByName, directoryInstitutionID)
	var i GetDirectoryInstitutionByNameRow
	err := row.Scan(&i.InstitutionID, &i.DirectoryID)
	return i, err
}

const listDirectoryInstitutions = `-- name: ListDirectoryInstitutions :many
SELECT directory_institution_id, institution_id, directory_id, created_at, updated_at, deleted_at FROM directory_institution
ORDER BY directory_institution_id
`

func (q *Queries) ListDirectoryInstitutions(ctx context.Context) ([]DirectoryInstitution, error) {
	rows, err := q.db.QueryContext(ctx, listDirectoryInstitutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DirectoryInstitution
	for rows.Next() {
		var i DirectoryInstitution
		if err := rows.Scan(
			&i.DirectoryInstitutionID,
			&i.InstitutionID,
			&i.DirectoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
