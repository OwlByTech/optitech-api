// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: membership_type.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createMembershipType = `-- name: CreateMembershipType :one
INSERT INTO membership_type(membership_name, users, created_at)
VALUES ($1, $2, $3)
RETURNING membership_type_id, membership_name, users, created_at, updated_at, deleted_at
`

type CreateMembershipTypeParams struct {
	MembershipName string    `json:"membership_name"`
	Users          int32     `json:"users"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) CreateMembershipType(ctx context.Context, arg CreateMembershipTypeParams) (MembershipType, error) {
	row := q.db.QueryRowContext(ctx, createMembershipType, arg.MembershipName, arg.Users, arg.CreatedAt)
	var i MembershipType
	err := row.Scan(
		&i.MembershipTypeID,
		&i.MembershipName,
		&i.Users,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMembershipType = `-- name: DeleteMembershipType :execresult
UPDATE membership_type
SET deleted_at = $1
WHERE membership_type_id IS NULL
`

func (q *Queries) DeleteMembershipType(ctx context.Context, deletedAt sql.NullTime) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteMembershipType, deletedAt)
}

const deleteMembershipTypeById = `-- name: DeleteMembershipTypeById :exec
UPDATE membership_type
SET deleted_at = $2
WHERE membership_type_id = $1
`

type DeleteMembershipTypeByIdParams struct {
	MembershipTypeID int64        `json:"membership_type_id"`
	DeletedAt        sql.NullTime `json:"deleted_at"`
}

func (q *Queries) DeleteMembershipTypeById(ctx context.Context, arg DeleteMembershipTypeByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteMembershipTypeById, arg.MembershipTypeID, arg.DeletedAt)
	return err
}

const getMembershipTypeByName = `-- name: GetMembershipTypeByName :one
SELECT membership_name, users
FROM membership_type
WHERE membership_type_id = $1
`

type GetMembershipTypeByNameRow struct {
	MembershipName string `json:"membership_name"`
	Users          int32  `json:"users"`
}

func (q *Queries) GetMembershipTypeByName(ctx context.Context, membershipTypeID int64) (GetMembershipTypeByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getMembershipTypeByName, membershipTypeID)
	var i GetMembershipTypeByNameRow
	err := row.Scan(&i.MembershipName, &i.Users)
	return i, err
}

const listMembershipType = `-- name: ListMembershipType :many
SELECT membership_type_id, membership_name, users, created_at, updated_at, deleted_at FROM membership_type
ORDER BY membership_type_id
`

func (q *Queries) ListMembershipType(ctx context.Context) ([]MembershipType, error) {
	rows, err := q.db.QueryContext(ctx, listMembershipType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MembershipType
	for rows.Next() {
		var i MembershipType
		if err := rows.Scan(
			&i.MembershipTypeID,
			&i.MembershipName,
			&i.Users,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipTypeById = `-- name: UpdateMembershipTypeById :exec
UPDATE membership_type
SET membership_name = $2, users = $3, updated_at = $4
WHERE membership_type_id = $1
`

type UpdateMembershipTypeByIdParams struct {
	MembershipTypeID int64        `json:"membership_type_id"`
	MembershipName   string       `json:"membership_name"`
	Users            int32        `json:"users"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdateMembershipTypeById(ctx context.Context, arg UpdateMembershipTypeByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateMembershipTypeById,
		arg.MembershipTypeID,
		arg.MembershipName,
		arg.Users,
		arg.UpdatedAt,
	)
	return err
}
