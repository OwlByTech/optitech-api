// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: institution_services.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createInstitutionService = `-- name: CreateInstitutionService :one
INSERT INTO institution_services(institution_id, services_id, created_at)
VALUES ($1, $2, $3)
RETURNING institution_services_id, institution_id, services_id, created_at, updated_at, deleted_at
`

type CreateInstitutionServiceParams struct {
	InstitutionID int32     `json:"institution_id"`
	ServicesID    int32     `json:"services_id"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateInstitutionService(ctx context.Context, arg CreateInstitutionServiceParams) (InstitutionService, error) {
	row := q.db.QueryRowContext(ctx, createInstitutionService, arg.InstitutionID, arg.ServicesID, arg.CreatedAt)
	var i InstitutionService
	err := row.Scan(
		&i.InstitutionServicesID,
		&i.InstitutionID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllInstitutionServices = `-- name: DeleteAllInstitutionServices :execresult
UPDATE institution_services
SET deleted_at = $1
WHERE institution_services_id IS NULL
`

func (q *Queries) DeleteAllInstitutionServices(ctx context.Context, deletedAt sql.NullTime) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllInstitutionServices, deletedAt)
}

const deleteInstitutionServiceById = `-- name: DeleteInstitutionServiceById :exec
UPDATE institution_services
SET deleted_at = $2
WHERE institution_services_id = $1
`

type DeleteInstitutionServiceByIdParams struct {
	InstitutionServicesID int64        `json:"institution_services_id"`
	DeletedAt             sql.NullTime `json:"deleted_at"`
}

func (q *Queries) DeleteInstitutionServiceById(ctx context.Context, arg DeleteInstitutionServiceByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteInstitutionServiceById, arg.InstitutionServicesID, arg.DeletedAt)
	return err
}

const getInstitutionService = `-- name: GetInstitutionService :one
SELECT institution_services_id, institution_id, services_id, created_at, updated_at, deleted_at FROM institution_services
WHERE institution_services_id = $1 LIMIT 1
`

func (q *Queries) GetInstitutionService(ctx context.Context, institutionServicesID int64) (InstitutionService, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionService, institutionServicesID)
	var i InstitutionService
	err := row.Scan(
		&i.InstitutionServicesID,
		&i.InstitutionID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getInstitutionServiceByName = `-- name: GetInstitutionServiceByName :one
SELECT institution_id, services_id
FROM institution_services
WHERE institution_services_id = $1
`

type GetInstitutionServiceByNameRow struct {
	InstitutionID int32 `json:"institution_id"`
	ServicesID    int32 `json:"services_id"`
}

func (q *Queries) GetInstitutionServiceByName(ctx context.Context, institutionServicesID int64) (GetInstitutionServiceByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionServiceByName, institutionServicesID)
	var i GetInstitutionServiceByNameRow
	err := row.Scan(&i.InstitutionID, &i.ServicesID)
	return i, err
}

const listInstitutionServices = `-- name: ListInstitutionServices :many
SELECT institution_services_id, institution_id, services_id, created_at, updated_at, deleted_at FROM institution_services
ORDER BY institution_services_id
`

func (q *Queries) ListInstitutionServices(ctx context.Context) ([]InstitutionService, error) {
	rows, err := q.db.QueryContext(ctx, listInstitutionServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstitutionService
	for rows.Next() {
		var i InstitutionService
		if err := rows.Scan(
			&i.InstitutionServicesID,
			&i.InstitutionID,
			&i.ServicesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
